/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : SS0.h
**     Project     : kpb17
**     Processor   : SKEAZ64MLH4
**     Component   : SPISlave_LDD
**     Version     : Component 01.048, Driver 01.02, CPU db: 3.00.000
**     Repository  : Kinetis
**     Compiler    : GNU C Compiler
**     Date/Time   : 2023-06-21, 11:41, # CodeGen: 52
**     Abstract    :
**         This component "SPISlave_LDD" implements SLAVE part of synchronous
**         serial master-slave communication.
**     Settings    :
**          Component name                                 : SS0
**          Device                                         : SPI0
**          Interrupt service/event                        : Enabled
**            Input interrupt                              : INT_SPI0
**            Input interrupt priority                     : medium priority
**            Input ISR name                               : SS0_Interrupt
**            Output interrupt                             : INT_SPI0
**            Output interrupt priority                    : medium priority
**            Output ISR name                              : SS0_Interrupt
**          Settings                                       : 
**            Input pin                                    : Enabled
**              Pin                                        : PTB3/KBI0_P11/SPI0_MOSI/FTM0_CH1/ADC0_SE7
**            Output pin                                   : Enabled
**              Pin                                        : PTB4/KBI0_P12/FTM2_CH4/SPI0_MISO/ACMP1_IN2/NMI_b
**            Clock pin                                    : 
**              Pin                                        : PTB2/KBI0_P10/SPI0_SCK/FTM0_CH0/ADC0_SE6
**            Slave select                                 : 
**              Pin                                        : PTB5/KBI0_P13/FTM2_CH5/SPI0_PCS/ACMP1_OUT
**              Active level                               : Low
**            Attribute set                                : 
**              Width                                      : 8 bits
**              MSB first                                  : yes
**              Clock polarity                             : Low
**              Clock phase                                : Change on leading edge
**              Parity                                     : None
**            HW input buffer size                         : 1
**            HW input watermark                           : 1
**            HW output buffer size                        : 1
**            HW output watermark                          : 1
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnBlockSent                                : Enabled
**              OnBlockReceived                            : Enabled
**              OnError                                    : Disabled
**     Contents    :
**         Init                    - LDD_TDeviceData* SS0_Init(LDD_TUserData *UserDataPtr);
**         Deinit                  - void SS0_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         SendBlock               - LDD_TError SS0_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData...
**         ReceiveBlock            - LDD_TError SS0_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData...
**         GetBlockSentStatus      - bool SS0_GetBlockSentStatus(LDD_TDeviceData *DeviceDataPtr);
**         GetBlockReceivedStatus  - bool SS0_GetBlockReceivedStatus(LDD_TDeviceData *DeviceDataPtr);
**         CancelBlockTransmission - LDD_TError SS0_CancelBlockTransmission(LDD_TDeviceData *DeviceDataPtr);
**         CancelBlockReception    - LDD_TError SS0_CancelBlockReception(LDD_TDeviceData *DeviceDataPtr);
**         GetStats                - LDD_SPISLAVE_TStats SS0_GetStats(LDD_TDeviceData *DeviceDataPtr);
**         GetDriverState          - LDD_TDriverState SS0_GetDriverState(LDD_TDeviceData *DeviceDataPtr);
**
**     Copyright : 1997 - 2015 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file SS0.h
** @version 01.02
** @brief
**         This component "SPISlave_LDD" implements SLAVE part of synchronous
**         serial master-slave communication.
*/         
/*!
**  @addtogroup SS0_module SS0 module documentation
**  @{
*/         

#ifndef __SS0_H
#define __SS0_H

/* MODULE SS0. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "Cpu.h"
#include "SPI_PDD.h"

#ifdef __cplusplus
extern "C" {
#endif 


/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define SS0_PRPH_BASE_ADDRESS  0x40076000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define SS0_Init_METHOD_ENABLED        /*!< Init method of the component SS0 is enabled (generated) */
#define SS0_Deinit_METHOD_ENABLED      /*!< Deinit method of the component SS0 is enabled (generated) */
#define SS0_SendBlock_METHOD_ENABLED   /*!< SendBlock method of the component SS0 is enabled (generated) */
#define SS0_ReceiveBlock_METHOD_ENABLED /*!< ReceiveBlock method of the component SS0 is enabled (generated) */
#define SS0_GetBlockSentStatus_METHOD_ENABLED /*!< GetBlockSentStatus method of the component SS0 is enabled (generated) */
#define SS0_GetBlockReceivedStatus_METHOD_ENABLED /*!< GetBlockReceivedStatus method of the component SS0 is enabled (generated) */
#define SS0_CancelBlockTransmission_METHOD_ENABLED /*!< CancelBlockTransmission method of the component SS0 is enabled (generated) */
#define SS0_CancelBlockReception_METHOD_ENABLED /*!< CancelBlockReception method of the component SS0 is enabled (generated) */
#define SS0_GetStats_METHOD_ENABLED    /*!< GetStats method of the component SS0 is enabled (generated) */
#define SS0_GetDriverState_METHOD_ENABLED /*!< GetDriverState method of the component SS0 is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */
#define SS0_OnBlockSent_EVENT_ENABLED  /*!< OnBlockSent event of the component SS0 is enabled (generated) */
#define SS0_OnBlockReceived_EVENT_ENABLED /*!< OnBlockReceived event of the component SS0 is enabled (generated) */


/*
** ===================================================================
**     Method      :  SS0_Init (component SPISlave_LDD)
*/
/*!
**     @brief
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc.
**         If the "Enable in init. code" is set to "yes" value then the
**         device is also enabled(see the description of the Enable()
**         method). In this case the Enable() method is not necessary
**         and needn't to be generated. 
**         This method can be called only once. Before the second call
**         of Init() the Deinit() must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* SS0_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  SS0_Deinit (component SPISlave_LDD)
*/
/*!
**     @brief
**         This method deinitializes the device. It switches off the
**         device, frees the device data structure memory, interrupts
**         vectors, etc.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
*/
/* ===================================================================*/
void SS0_Deinit(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SS0_ReceiveBlock (component SPISlave_LDD)
*/
/*!
**     @brief
**         This method specifies the number of data to receive. The
**         method returns ERR_BUSY until the specified number of
**         characters is received. The method [CancelBlockReception]
**         can be used to cancel a running receive operation. If a
**         receive operation is not in progress (the method was not
**         called or a previous operation has already finished) all
**         received characters will be lost without any notification.
**         To prevent the loss of data call the method immediately
**         after the last receive operation has finished (e.g. from the
**         [OnBlockReceived] event). This method finishes immediately
**         after calling it - it doesn't wait the end of data reception.
**         Use event [OnBlockReceived] to check the end of data
**         reception or method GetReceivedDataNum to check the state of
**         receiving.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         BufferPtr       - Pointer to A buffer where
**                           received characters will be stored.
**     @param
**         Size            - Size of the block
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - The previous receive request is
**                           pending
*/
/* ===================================================================*/
LDD_TError SS0_ReceiveBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size);

/*
** ===================================================================
**     Method      :  SS0_SendBlock (component SPISlave_LDD)
*/
/*!
**     @brief
**         This method sends a block of characters. The method returns
**         ERR_BUSY when the previous block transmission is not
**         completed. The method [CancelBlockTransmission] can be used
**         to cancel a transmit operation. This method finishes
**         immediately after calling it - it doesn't wait the end of
**         data transmission. Use event [OnBlockSent] to check the end
**         of data transmission or method GetSentDataNum to check the
**         state of sending.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         BufferPtr       - Pointer to the block of data
**                           to send.
**     @param
**         Size            - Number of characters in the buffer.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - The previous transmit request is
**                           pending
*/
/* ===================================================================*/
LDD_TError SS0_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size);

/*
** ===================================================================
**     Method      :  SS0_GetBlockSentStatus (component SPISlave_LDD)
*/
/*!
**     @brief
**         This method returns whether the transmitter is finished
**         transmitting all data block. The status flag is accumulated,
**         after calling this method the status is returned and cleared
**         (set to "false" state). This method is available only if
**         method SendBlock is enabled.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Return value:
**                           true - Data block is completely transmitted
**                           false - Data block isn't completely
**                           transmitted.
*/
/* ===================================================================*/
bool SS0_GetBlockSentStatus(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SS0_GetBlockReceivedStatus (component SPISlave_LDD)
*/
/*!
**     @brief
**         This method returns whether the receiver is finished
**         reception of all data block. The status flag is accumulated,
**         after calling this method the status is returned and cleared
**         (set to "false" state). This method is available only if
**         method ReceiveBlock is enabled.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Return value:
**                           true - Data block is completely received
**                           false - Data block isn't completely received
*/
/* ===================================================================*/
bool SS0_GetBlockReceivedStatus(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SS0_CancelBlockTransmission (component SPISlave_LDD)
*/
/*!
**     @brief
**         Immediately cancels running transmit process. Unsent data
**         will never been sent. This method is available only if the
**         SendBlock method is enabled.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_DISABLED - Component is disabled
*/
/* ===================================================================*/
LDD_TError SS0_CancelBlockTransmission(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SS0_CancelBlockReception (component SPISlave_LDD)
*/
/*!
**     @brief
**         Immediately cancels the running receive process started by
**         the ReceiveBlock method. Characters already stored in the HW
**         buffer will be lost. This method is available only if the
**         ReceiveBlock method is enabled.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_DISABLED - Component is disabled
*/
/* ===================================================================*/
LDD_TError SS0_CancelBlockReception(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SS0_Interrupt (component SPISlave_LDD)
**
**     Description :
**         The ISR function handling the device receive/transmit 
**         interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {Default RTOS Adapter} ISR function prototype */
PE_ISR(SS0_Interrupt);

/*
** ===================================================================
**     Method      :  SS0_GetDriverState (component SPISlave_LDD)
*/
/*!
**     @brief
**         This method returns the current driver status.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - The current driver status mask.
**                           Following status masks defined in PE_Types.
**                           h can be used to check the current driver
**                           status.
**                           PE_LDD_DRIVER_DISABLED_BY_USER - 1 - Driver
**                           is disabled by the user; 0 - Driver is
**                           enabled by the user.        
**                           PE_LDD_DRIVER_BUSY - 1 - Driver is the BUSY
**                           state; 0 - Driver is in the IDLE state.
*/
/* ===================================================================*/
LDD_TDriverState SS0_GetDriverState(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SS0_GetStats (component SPISlave_LDD)
*/
/*!
**     @brief
**         Returns communication statistics (e.g. sent character count,
**         parity error count).
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - The actual communication statistics.
*/
/* ===================================================================*/
LDD_SPISLAVE_TStats SS0_GetStats(LDD_TDeviceData *DeviceDataPtr);

/* END SS0. */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif
/* ifndef __SS0_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
